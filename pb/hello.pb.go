// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hello.proto

package pb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HelloRequest struct {
	Params     map[string]string `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Url        string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	UserToken  string            `protobuf:"bytes,3,opt,name=userToken,proto3" json:"userToken,omitempty"`
	UserID     string            `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID,omitempty"`
	AppID      string            `protobuf:"bytes,5,opt,name=appID,proto3" json:"appID,omitempty"`
	AppKey     string            `protobuf:"bytes,6,opt,name=appKey,proto3" json:"appKey,omitempty"`
	Ip         string            `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	ClientID   string            `protobuf:"bytes,8,opt,name=clientID,proto3" json:"clientID,omitempty"`
	CsrfToken  string            `protobuf:"bytes,9,opt,name=CsrfToken,proto3" json:"CsrfToken,omitempty"`
	TraceID    string            `protobuf:"bytes,10,opt,name=traceID,proto3" json:"traceID,omitempty"`
	Body       []byte            `protobuf:"bytes,11,opt,name=body,proto3" json:"body,omitempty"`
	Header     []byte            `protobuf:"bytes,12,opt,name=header,proto3" json:"header,omitempty"`
	UserAgent  []byte            `protobuf:"bytes,13,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	Referer    []byte            `protobuf:"bytes,14,opt,name=referer,proto3" json:"referer,omitempty"`
	Queries    []byte            `protobuf:"bytes,15,opt,name=queries,proto3" json:"queries,omitempty"`
	EncryptAES bool              `protobuf:"varint,16,opt,name=encryptAES,proto3" json:"encryptAES,omitempty"`
}

func (m *HelloRequest) Reset()      { *m = HelloRequest{} }
func (*HelloRequest) ProtoMessage() {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{0}
}
func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return m.Size()
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *HelloRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HelloRequest) GetUserToken() string {
	if m != nil {
		return m.UserToken
	}
	return ""
}

func (m *HelloRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *HelloRequest) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *HelloRequest) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

func (m *HelloRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *HelloRequest) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *HelloRequest) GetCsrfToken() string {
	if m != nil {
		return m.CsrfToken
	}
	return ""
}

func (m *HelloRequest) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

func (m *HelloRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *HelloRequest) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HelloRequest) GetUserAgent() []byte {
	if m != nil {
		return m.UserAgent
	}
	return nil
}

func (m *HelloRequest) GetReferer() []byte {
	if m != nil {
		return m.Referer
	}
	return nil
}

func (m *HelloRequest) GetQueries() []byte {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *HelloRequest) GetEncryptAES() bool {
	if m != nil {
		return m.EncryptAES
	}
	return false
}

type HelloResponse struct {
	Result   string            `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Header   map[string]string `protobuf:"bytes,2,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PageInfo map[string]int64  `protobuf:"bytes,3,rep,name=pageInfo,proto3" json:"pageInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TType    string            `protobuf:"bytes,4,opt,name=TType,proto3" json:"TType,omitempty"`
	Status   string            `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Code     string            `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *HelloResponse) Reset()      { *m = HelloResponse{} }
func (*HelloResponse) ProtoMessage() {}
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{1}
}
func (m *HelloResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResponse.Merge(m, src)
}
func (m *HelloResponse) XXX_Size() int {
	return m.Size()
}
func (m *HelloResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResponse proto.InternalMessageInfo

func (m *HelloResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *HelloResponse) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HelloResponse) GetPageInfo() map[string]int64 {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

func (m *HelloResponse) GetTType() string {
	if m != nil {
		return m.TType
	}
	return ""
}

func (m *HelloResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *HelloResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type TempData struct {
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Count   int64  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Many    string `protobuf:"bytes,4,opt,name=many,proto3" json:"many,omitempty"`
}

func (m *TempData) Reset()      { *m = TempData{} }
func (*TempData) ProtoMessage() {}
func (*TempData) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{2}
}
func (m *TempData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TempData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TempData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TempData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TempData.Merge(m, src)
}
func (m *TempData) XXX_Size() int {
	return m.Size()
}
func (m *TempData) XXX_DiscardUnknown() {
	xxx_messageInfo_TempData.DiscardUnknown(m)
}

var xxx_messageInfo_TempData proto.InternalMessageInfo

func (m *TempData) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *TempData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TempData) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *TempData) GetMany() string {
	if m != nil {
		return m.Many
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "HelloRequest")
	proto.RegisterMapType((map[string]string)(nil), "HelloRequest.ParamsEntry")
	proto.RegisterType((*HelloResponse)(nil), "HelloResponse")
	proto.RegisterMapType((map[string]string)(nil), "HelloResponse.HeaderEntry")
	proto.RegisterMapType((map[string]int64)(nil), "HelloResponse.PageInfoEntry")
	proto.RegisterType((*TempData)(nil), "TempData")
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor_61ef911816e0a8ce) }

var fileDescriptor_61ef911816e0a8ce = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xb1, 0x4e, 0x1b, 0x4d,
	0x10, 0xbe, 0xf5, 0x81, 0xb1, 0xc7, 0x98, 0x1f, 0xad, 0x7e, 0x45, 0x1b, 0x0b, 0xad, 0x2c, 0x2a,
	0x4b, 0x51, 0x1c, 0xc5, 0x69, 0x9c, 0x50, 0x91, 0x18, 0x81, 0x15, 0x45, 0x42, 0xc6, 0x55, 0xba,
	0xb5, 0x19, 0xc0, 0xc2, 0xbe, 0x5b, 0xf6, 0xf6, 0x90, 0xae, 0xcb, 0x23, 0xe4, 0x31, 0xf2, 0x28,
	0xe9, 0x42, 0x49, 0x19, 0x8e, 0x26, 0x25, 0x45, 0x1e, 0x20, 0xda, 0xb9, 0xb5, 0xb1, 0xd3, 0xa0,
	0x74, 0xf3, 0xcd, 0x37, 0xb3, 0xf7, 0xed, 0x37, 0xb3, 0x07, 0xb5, 0x0b, 0x9c, 0x4e, 0xe3, 0xb6,
	0x36, 0xb1, 0x8d, 0x77, 0x7f, 0x87, 0xb0, 0x79, 0xe4, 0xf0, 0x00, 0xaf, 0x52, 0x4c, 0x2c, 0x7f,
	0x0d, 0x65, 0xad, 0x8c, 0x9a, 0x25, 0x82, 0x35, 0xc3, 0x56, 0xad, 0xf3, 0xbc, 0xbd, 0x4c, 0xb7,
	0x8f, 0x89, 0x3b, 0x88, 0xac, 0xc9, 0x06, 0xbe, 0x90, 0x6f, 0x43, 0x98, 0x9a, 0xa9, 0x28, 0x35,
	0x59, 0xab, 0x3a, 0x70, 0x21, 0xdf, 0x81, 0x6a, 0x9a, 0xa0, 0x19, 0xc6, 0x97, 0x18, 0x89, 0x90,
	0xf2, 0x8f, 0x09, 0xfe, 0x0c, 0xca, 0x0e, 0xf4, 0x7b, 0x62, 0x8d, 0x28, 0x8f, 0xf8, 0xff, 0xb0,
	0xae, 0xb4, 0xee, 0xf7, 0xc4, 0x3a, 0xa5, 0x0b, 0xe0, 0xaa, 0x95, 0xd6, 0x1f, 0x31, 0x13, 0xe5,
	0xa2, 0xba, 0x40, 0x7c, 0x0b, 0x4a, 0x13, 0x2d, 0x36, 0x28, 0x57, 0x9a, 0x68, 0xde, 0x80, 0xca,
	0x78, 0x3a, 0xc1, 0xc8, 0xf6, 0x7b, 0xa2, 0x42, 0xd9, 0x05, 0x76, 0x7a, 0x3e, 0x24, 0xe6, 0xac,
	0xd0, 0x53, 0x2d, 0xf4, 0x2c, 0x12, 0x5c, 0xc0, 0x86, 0x35, 0x6a, 0x8c, 0xfd, 0x9e, 0x00, 0xe2,
	0xe6, 0x90, 0x73, 0x58, 0x1b, 0xc5, 0xa7, 0x99, 0xa8, 0x35, 0x59, 0x6b, 0x73, 0x40, 0xb1, 0xd3,
	0x73, 0x81, 0xea, 0x14, 0x8d, 0xd8, 0xa4, 0xac, 0x47, 0xf3, 0x3b, 0xef, 0x9f, 0x63, 0x64, 0x45,
	0x9d, 0xa8, 0xc7, 0x84, 0xfb, 0x86, 0xc1, 0x33, 0x34, 0x68, 0xc4, 0x16, 0x71, 0x73, 0xe8, 0x98,
	0xab, 0x14, 0xcd, 0x04, 0x13, 0xf1, 0x5f, 0xc1, 0x78, 0xc8, 0x25, 0x00, 0x46, 0x63, 0x93, 0x69,
	0xbb, 0x7f, 0x70, 0x22, 0xb6, 0x9b, 0xac, 0x55, 0x19, 0x2c, 0x65, 0x1a, 0x6f, 0xa1, 0xb6, 0x34,
	0x0e, 0x37, 0x86, 0x4b, 0xcc, 0x04, 0x2b, 0xc6, 0x70, 0x89, 0x99, 0x33, 0xf4, 0x5a, 0x4d, 0x53,
	0xf4, 0xa3, 0x29, 0xc0, 0xbb, 0x52, 0x97, 0xed, 0xfe, 0x28, 0x41, 0xdd, 0xcf, 0x35, 0xd1, 0x71,
	0x94, 0xa0, 0xbb, 0x96, 0xc1, 0x24, 0x9d, 0x5a, 0x7f, 0x80, 0x47, 0xbc, 0xb3, 0xb8, 0x6e, 0x89,
	0xf6, 0xa1, 0xd1, 0x5e, 0xe9, 0x6b, 0x1f, 0x11, 0xe9, 0x17, 0xc2, 0x5b, 0xd1, 0x85, 0x8a, 0x56,
	0xe7, 0xd8, 0x8f, 0xce, 0x62, 0x11, 0x52, 0xd7, 0xce, 0x5f, 0x5d, 0xc7, 0x9e, 0x2e, 0xfa, 0x16,
	0xd5, 0x4e, 0xf1, 0x70, 0x98, 0x69, 0xf4, 0x9b, 0x51, 0x00, 0xa7, 0x2d, 0xb1, 0xca, 0xa6, 0x89,
	0xdf, 0x0c, 0x8f, 0xdc, 0x78, 0xc6, 0xf1, 0x29, 0xfa, 0xc5, 0xa0, 0xd8, 0x99, 0xb2, 0x24, 0xe9,
	0x5f, 0x4c, 0x69, 0xec, 0x41, 0x7d, 0x45, 0xd7, 0x53, 0xcd, 0xe1, 0xb2, 0xa3, 0x23, 0xa8, 0x0c,
	0x71, 0xa6, 0x7b, 0xca, 0x2a, 0x37, 0xd2, 0x71, 0x9c, 0xba, 0x23, 0x7c, 0xef, 0x1c, 0x3a, 0xc5,
	0x91, 0x9a, 0xcd, 0xbf, 0x4d, 0xb1, 0x3b, 0x93, 0x68, 0x7a, 0x28, 0xe1, 0xa0, 0x00, 0xae, 0x72,
	0xa6, 0xa2, 0xcc, 0x1b, 0x41, 0x71, 0xa7, 0x0b, 0x55, 0xb2, 0x71, 0xe8, 0x1e, 0xea, 0x0b, 0xa8,
	0x9c, 0xa8, 0x8c, 0x30, 0xaf, 0xaf, 0x3c, 0xd2, 0xc6, 0xd6, 0xaa, 0xdb, 0xbb, 0x41, 0xa7, 0x0b,
	0x1b, 0x87, 0xd7, 0xe7, 0xd4, 0xf7, 0x12, 0xe0, 0x10, 0xed, 0x27, 0xa5, 0xc9, 0xf0, 0xa7, 0x3a,
	0xdf, 0xef, 0xdd, 0xdc, 0xc9, 0xe0, 0xf6, 0x4e, 0x06, 0x0f, 0x77, 0x92, 0x7d, 0xc9, 0x25, 0xfb,
	0x96, 0x4b, 0xf6, 0x3d, 0x97, 0xec, 0x26, 0x97, 0xec, 0x67, 0x2e, 0xd9, 0xaf, 0x5c, 0x06, 0x0f,
	0xb9, 0x64, 0x5f, 0xef, 0x65, 0x70, 0x73, 0x2f, 0x83, 0xdb, 0x7b, 0x19, 0x7c, 0x5e, 0x6f, 0xbf,
	0xda, 0xd3, 0xa3, 0x51, 0x99, 0x7e, 0x32, 0x6f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x99, 0x6b,
	0x11, 0x0a, 0x73, 0x04, 0x00, 0x00,
}

func (this *HelloRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HelloRequest)
	if !ok {
		that2, ok := that.(HelloRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Params) != len(that1.Params) {
		return false
	}
	for i := range this.Params {
		if this.Params[i] != that1.Params[i] {
			return false
		}
	}
	if this.Url != that1.Url {
		return false
	}
	if this.UserToken != that1.UserToken {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	if this.AppID != that1.AppID {
		return false
	}
	if this.AppKey != that1.AppKey {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.ClientID != that1.ClientID {
		return false
	}
	if this.CsrfToken != that1.CsrfToken {
		return false
	}
	if this.TraceID != that1.TraceID {
		return false
	}
	if !bytes.Equal(this.Body, that1.Body) {
		return false
	}
	if !bytes.Equal(this.Header, that1.Header) {
		return false
	}
	if !bytes.Equal(this.UserAgent, that1.UserAgent) {
		return false
	}
	if !bytes.Equal(this.Referer, that1.Referer) {
		return false
	}
	if !bytes.Equal(this.Queries, that1.Queries) {
		return false
	}
	if this.EncryptAES != that1.EncryptAES {
		return false
	}
	return true
}
func (this *HelloResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HelloResponse)
	if !ok {
		that2, ok := that.(HelloResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if len(this.Header) != len(that1.Header) {
		return false
	}
	for i := range this.Header {
		if this.Header[i] != that1.Header[i] {
			return false
		}
	}
	if len(this.PageInfo) != len(that1.PageInfo) {
		return false
	}
	for i := range this.PageInfo {
		if this.PageInfo[i] != that1.PageInfo[i] {
			return false
		}
	}
	if this.TType != that1.TType {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *TempData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TempData)
	if !ok {
		that2, ok := that.(TempData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Many != that1.Many {
		return false
	}
	return true
}
func (this *HelloRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&pb.HelloRequest{")
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%#v: %#v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	if this.Params != nil {
		s = append(s, "Params: "+mapStringForParams+",\n")
	}
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "UserToken: "+fmt.Sprintf("%#v", this.UserToken)+",\n")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "AppID: "+fmt.Sprintf("%#v", this.AppID)+",\n")
	s = append(s, "AppKey: "+fmt.Sprintf("%#v", this.AppKey)+",\n")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "ClientID: "+fmt.Sprintf("%#v", this.ClientID)+",\n")
	s = append(s, "CsrfToken: "+fmt.Sprintf("%#v", this.CsrfToken)+",\n")
	s = append(s, "TraceID: "+fmt.Sprintf("%#v", this.TraceID)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	s = append(s, "UserAgent: "+fmt.Sprintf("%#v", this.UserAgent)+",\n")
	s = append(s, "Referer: "+fmt.Sprintf("%#v", this.Referer)+",\n")
	s = append(s, "Queries: "+fmt.Sprintf("%#v", this.Queries)+",\n")
	s = append(s, "EncryptAES: "+fmt.Sprintf("%#v", this.EncryptAES)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HelloResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.HelloResponse{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	keysForHeader := make([]string, 0, len(this.Header))
	for k, _ := range this.Header {
		keysForHeader = append(keysForHeader, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeader)
	mapStringForHeader := "map[string]string{"
	for _, k := range keysForHeader {
		mapStringForHeader += fmt.Sprintf("%#v: %#v,", k, this.Header[k])
	}
	mapStringForHeader += "}"
	if this.Header != nil {
		s = append(s, "Header: "+mapStringForHeader+",\n")
	}
	keysForPageInfo := make([]string, 0, len(this.PageInfo))
	for k, _ := range this.PageInfo {
		keysForPageInfo = append(keysForPageInfo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPageInfo)
	mapStringForPageInfo := "map[string]int64{"
	for _, k := range keysForPageInfo {
		mapStringForPageInfo += fmt.Sprintf("%#v: %#v,", k, this.PageInfo[k])
	}
	mapStringForPageInfo += "}"
	if this.PageInfo != nil {
		s = append(s, "PageInfo: "+mapStringForPageInfo+",\n")
	}
	s = append(s, "TType: "+fmt.Sprintf("%#v", this.TType)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TempData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.TempData{")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Many: "+fmt.Sprintf("%#v", this.Many)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHello(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HelloRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EncryptAES {
		i--
		if m.EncryptAES {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Queries) > 0 {
		i -= len(m.Queries)
		copy(dAtA[i:], m.Queries)
		i = encodeVarintHello(dAtA, i, uint64(len(m.Queries)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Referer) > 0 {
		i -= len(m.Referer)
		copy(dAtA[i:], m.Referer)
		i = encodeVarintHello(dAtA, i, uint64(len(m.Referer)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.UserAgent) > 0 {
		i -= len(m.UserAgent)
		copy(dAtA[i:], m.UserAgent)
		i = encodeVarintHello(dAtA, i, uint64(len(m.UserAgent)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Header) > 0 {
		i -= len(m.Header)
		copy(dAtA[i:], m.Header)
		i = encodeVarintHello(dAtA, i, uint64(len(m.Header)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintHello(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.TraceID) > 0 {
		i -= len(m.TraceID)
		copy(dAtA[i:], m.TraceID)
		i = encodeVarintHello(dAtA, i, uint64(len(m.TraceID)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CsrfToken) > 0 {
		i -= len(m.CsrfToken)
		copy(dAtA[i:], m.CsrfToken)
		i = encodeVarintHello(dAtA, i, uint64(len(m.CsrfToken)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ClientID) > 0 {
		i -= len(m.ClientID)
		copy(dAtA[i:], m.ClientID)
		i = encodeVarintHello(dAtA, i, uint64(len(m.ClientID)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintHello(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AppKey) > 0 {
		i -= len(m.AppKey)
		copy(dAtA[i:], m.AppKey)
		i = encodeVarintHello(dAtA, i, uint64(len(m.AppKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AppID) > 0 {
		i -= len(m.AppID)
		copy(dAtA[i:], m.AppID)
		i = encodeVarintHello(dAtA, i, uint64(len(m.AppID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintHello(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserToken) > 0 {
		i -= len(m.UserToken)
		copy(dAtA[i:], m.UserToken)
		i = encodeVarintHello(dAtA, i, uint64(len(m.UserToken)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintHello(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintHello(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHello(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHello(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HelloResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintHello(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintHello(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TType) > 0 {
		i -= len(m.TType)
		copy(dAtA[i:], m.TType)
		i = encodeVarintHello(dAtA, i, uint64(len(m.TType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PageInfo) > 0 {
		for k := range m.PageInfo {
			v := m.PageInfo[k]
			baseI := i
			i = encodeVarintHello(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHello(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHello(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Header) > 0 {
		for k := range m.Header {
			v := m.Header[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintHello(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHello(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHello(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintHello(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TempData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TempData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TempData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Many) > 0 {
		i -= len(m.Many)
		copy(dAtA[i:], m.Many)
		i = encodeVarintHello(dAtA, i, uint64(len(m.Many)))
		i--
		dAtA[i] = 0x22
	}
	if m.Count != 0 {
		i = encodeVarintHello(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHello(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintHello(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHello(dAtA []byte, offset int, v uint64) int {
	offset -= sovHello(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HelloRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovHello(uint64(len(k))) + 1 + len(v) + sovHello(uint64(len(v)))
			n += mapEntrySize + 1 + sovHello(uint64(mapEntrySize))
		}
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	l = len(m.UserToken)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	l = len(m.CsrfToken)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	l = len(m.TraceID)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	l = len(m.Header)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	l = len(m.Referer)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	l = len(m.Queries)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	if m.EncryptAES {
		n += 3
	}
	return n
}

func (m *HelloResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	if len(m.Header) > 0 {
		for k, v := range m.Header {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovHello(uint64(len(k))) + 1 + len(v) + sovHello(uint64(len(v)))
			n += mapEntrySize + 1 + sovHello(uint64(mapEntrySize))
		}
	}
	if len(m.PageInfo) > 0 {
		for k, v := range m.PageInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovHello(uint64(len(k))) + 1 + sovHello(uint64(v))
			n += mapEntrySize + 1 + sovHello(uint64(mapEntrySize))
		}
	}
	l = len(m.TType)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	return n
}

func (m *TempData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovHello(uint64(m.Count))
	}
	l = len(m.Many)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	return n
}

func sovHello(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHello(x uint64) (n int) {
	return sovHello(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HelloRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%v: %v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	s := strings.Join([]string{`&HelloRequest{`,
		`Params:` + mapStringForParams + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`UserToken:` + fmt.Sprintf("%v", this.UserToken) + `,`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`AppID:` + fmt.Sprintf("%v", this.AppID) + `,`,
		`AppKey:` + fmt.Sprintf("%v", this.AppKey) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`ClientID:` + fmt.Sprintf("%v", this.ClientID) + `,`,
		`CsrfToken:` + fmt.Sprintf("%v", this.CsrfToken) + `,`,
		`TraceID:` + fmt.Sprintf("%v", this.TraceID) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`Header:` + fmt.Sprintf("%v", this.Header) + `,`,
		`UserAgent:` + fmt.Sprintf("%v", this.UserAgent) + `,`,
		`Referer:` + fmt.Sprintf("%v", this.Referer) + `,`,
		`Queries:` + fmt.Sprintf("%v", this.Queries) + `,`,
		`EncryptAES:` + fmt.Sprintf("%v", this.EncryptAES) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HelloResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForHeader := make([]string, 0, len(this.Header))
	for k, _ := range this.Header {
		keysForHeader = append(keysForHeader, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeader)
	mapStringForHeader := "map[string]string{"
	for _, k := range keysForHeader {
		mapStringForHeader += fmt.Sprintf("%v: %v,", k, this.Header[k])
	}
	mapStringForHeader += "}"
	keysForPageInfo := make([]string, 0, len(this.PageInfo))
	for k, _ := range this.PageInfo {
		keysForPageInfo = append(keysForPageInfo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPageInfo)
	mapStringForPageInfo := "map[string]int64{"
	for _, k := range keysForPageInfo {
		mapStringForPageInfo += fmt.Sprintf("%v: %v,", k, this.PageInfo[k])
	}
	mapStringForPageInfo += "}"
	s := strings.Join([]string{`&HelloResponse{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`Header:` + mapStringForHeader + `,`,
		`PageInfo:` + mapStringForPageInfo + `,`,
		`TType:` + fmt.Sprintf("%v", this.TType) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TempData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TempData{`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Many:` + fmt.Sprintf("%v", this.Many) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHello(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HelloRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHello
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHello
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHello
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHello
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHello
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthHello
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthHello
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHello(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHello
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CsrfToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Header = append(m.Header[:0], dAtA[iNdEx:postIndex]...)
			if m.Header == nil {
				m.Header = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = append(m.UserAgent[:0], dAtA[iNdEx:postIndex]...)
			if m.UserAgent == nil {
				m.UserAgent = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Referer = append(m.Referer[:0], dAtA[iNdEx:postIndex]...)
			if m.Referer == nil {
				m.Referer = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries[:0], dAtA[iNdEx:postIndex]...)
			if m.Queries == nil {
				m.Queries = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptAES", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EncryptAES = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelloResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHello
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHello
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHello
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHello
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHello
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthHello
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthHello
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHello(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHello
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Header[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageInfo == nil {
				m.PageInfo = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHello
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHello
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHello
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHello
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHello
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHello(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHello
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PageInfo[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TempData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TempData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TempData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Many", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Many = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHello(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHello
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHello
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHello
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHello
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHello
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHello
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHello        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHello          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHello = fmt.Errorf("proto: unexpected end of group")
)
